//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "App.xaml.h"
#include "MainPage.xaml.h"
#include "Scenario1_ParallaxBackground.xaml.h"
#include "Scenario2_ParallaxHub.xaml.h"
#include "XamlBindingInfo.g.hpp"
#include "App.g.hpp"
#include "MainPage.g.hpp"
#include "Scenario1_ParallaxBackground.g.hpp"
#include "Scenario2_ParallaxHub.g.hpp"

::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        auto otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
        _otherProviders = otherProviders;
    }
    return _otherProviders;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForName(::Platform::String^ typeName)
{
    ::Windows::UI::Xaml::Markup::IXamlType^ foundXamlType = nullptr;
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(typeName);
        if(xamlType != nullptr)
        {
            if(xamlType->IsConstructible)    // not Constructible means it might be a Return Type Stub
            {
                return xamlType;
            }
            foundXamlType = xamlType;
        }
    }
    return foundXamlType;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForType(::Windows::UI::Xaml::Interop::TypeName t)
{
    ::Windows::UI::Xaml::Markup::IXamlType^ foundXamlType = nullptr;
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(t);
        if(xamlType != nullptr)
        {
            if(xamlType->IsConstructible)    // not Constructible means it might be a Return Type Stub
            {
                return xamlType;
            }
            foundXamlType = xamlType;
        }
    }
    return foundXamlType;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    if (typeName == L"Windows.UI.Xaml.Controls.Page")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Windows.UI.Xaml.Controls.UserControl")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Windows.UI.Xaml.Controls.Hub")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Double")
    {
        return ref new XamlSystemBaseType(typeName);
    }
    if (typeName == L"Transform3DParallax.MainPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"Transform3DParallax.MainPage", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::Transform3DParallax::MainPage(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"Transform3DParallax.Scenario1_ParallaxBackground")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"Transform3DParallax.Scenario1_ParallaxBackground", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::Transform3DParallax::Scenario1_ParallaxBackground(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"Transform3DParallax.ParallaxBackgroundHub")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"Transform3DParallax.ParallaxBackgroundHub", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Hub"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::Transform3DParallax::ParallaxBackgroundHub(); 
            };
        userType->SetIsLocalType();
        return userType;
    }


    if (typeName == L"Transform3DParallax.Scenario2_ParallaxHub")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, L"Transform3DParallax.Scenario2_ParallaxHub", this->GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> ::Platform::Object^ 
            {
                return ref new ::Transform3DParallax::Scenario2_ParallaxHub(); 
            };
        userType->AddMemberName(L"DesiredHubSectionWidth");
        userType->SetIsLocalType();
        return userType;
    }


    return nullptr;
    }

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    if (longMemberName == L"Transform3DParallax.Scenario2_ParallaxHub.DesiredHubSectionWidth")
    {
       ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"DesiredHubSectionWidth", L"Double");
        xamlMember->SetIsDependencyProperty();
        xamlMember->Getter =
            [](::Platform::Object^ instance) -> ::Platform::Object^
            {
                auto that = (::Transform3DParallax::Scenario2_ParallaxHub^)instance;
                auto value = ref new ::Platform::Box<::default::float64>(that->DesiredHubSectionWidth);
                return value;
            };

        xamlMember->Setter =
            [](::Platform::Object^ instance, ::Platform::Object^ value) -> void
            {
                auto that = (::Transform3DParallax::Scenario2_ParallaxHub^)instance;
                auto boxedValue = (::Platform::IBox<::default::float64>^)value;
                that->DesiredHubSectionWidth = boxedValue->Value;
            };
        return xamlMember;
    }

    return nullptr;
}


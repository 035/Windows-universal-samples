
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"


::XamlBindingInfo::XamlBindings::XamlBindings(::XamlBindingInfo::IXamlBindings* pBindings)
    : _pBindings(pBindings)
{
}

::XamlBindingInfo::XamlBindings::~XamlBindings()
{
    delete _pBindings;
}

void ::XamlBindingInfo::XamlBindings::Initialize()
{
    if (!this->_initialized)
    { 
        this->Update();
    }
}

void ::XamlBindingInfo::XamlBindings::Update()
{
    this->_pBindings->Update();
    this->_initialized = true;
}

void ::XamlBindingInfo::XamlBindings::StopTracking()
{
    this->_pBindings->StopTracking();
}

void ::XamlBindingInfo::XamlBindings::Loading(::Windows::UI::Xaml::FrameworkElement^, ::Platform::Object^)
{
    this->Initialize();
}

void ::XamlBindingInfo::XamlBindings::DataContextChanged(::Windows::UI::Xaml::FrameworkElement^, ::Windows::UI::Xaml::DataContextChangedEventArgs^ args)
{
    if (this->_pBindings->SetDataRoot(args->NewValue))
    {
        this->Update();
    }
}

void ::XamlBindingInfo::XamlBindings::Connect(int connectionId, ::Platform::Object^ target)
{
    this->_pBindings->Connect(connectionId, target);
}

bool ::XamlBindingInfo::XamlBindings::ProcessBinding(unsigned int)
{
    throw ref new ::Platform::NotImplementedException();
}

int ::XamlBindingInfo::XamlBindings::ProcessBindings(Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs^ args)
{
    return this->_pBindings->ProcessBindings(args);
}

void ::XamlBindingInfo::XamlBindings::ResetTemplate()
{
    this->_pBindings->ResetTemplate();
}

namespace XamlBindingInfo
{
    class IXamlBindingTracking
    {
    public:
        virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) = 0;
        virtual void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e) = 0;
        virtual void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, Windows::UI::Xaml::DependencyProperty^ prop) = 0;
        virtual void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e) = 0;
    };

    ref class XamlBindingTracking sealed
    {
    internal:
        XamlBindingTracking()
        {
        }

        void SetListener(::XamlBindingInfo::IXamlBindingTracking* pBindings)
        {
            this->_pBindingsTrackingWeakRef = pBindings;
        }

        // Event handlers

        void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e)
        {
            if (this->_pBindingsTrackingWeakRef)
            {
                this->_pBindingsTrackingWeakRef->PropertyChanged(sender, e);
            }
        }

        void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
        {
            if (this->_pBindingsTrackingWeakRef)
            {
                this->_pBindingsTrackingWeakRef->CollectionChanged(sender, e);
            }
        }

        void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, Windows::UI::Xaml::DependencyProperty^ prop)
        {
            if (this->_pBindingsTrackingWeakRef)
            {
                this->_pBindingsTrackingWeakRef->DependencyPropertyChanged(sender, prop);
            }
        }


        // Listener update functions

        void UpdatePropertyChangedListener(::Windows::UI::Xaml::Data::INotifyPropertyChanged^ obj, ::Windows::UI::Xaml::Data::INotifyPropertyChanged^* pCache, ::Windows::Foundation::EventRegistrationToken* pToken)
        {
            if (*pCache != nullptr && !(*pCache)->Equals(obj))
            {
                (*pCache)->PropertyChanged -= *pToken;
                *pCache = nullptr;
            }

            if (*pCache == nullptr && obj != nullptr)
            {
                *pCache = obj;
                *pToken = obj->PropertyChanged += ref new ::Windows::UI::Xaml::Data::PropertyChangedEventHandler(
                    this, &::XamlBindingInfo::XamlBindingTracking::PropertyChanged);
            }
        }

        void UpdateCollectionChangedListener(::Windows::UI::Xaml::Interop::INotifyCollectionChanged^ obj, ::Windows::UI::Xaml::Interop::INotifyCollectionChanged^* pCache, ::Windows::Foundation::EventRegistrationToken* pToken)
        {
            if (*pCache != nullptr && !(*pCache)->Equals(obj))
            {
                (*pCache)->CollectionChanged -= *pToken;
                *pCache = nullptr;
            }

            if (*pCache == nullptr && obj != nullptr)
            {
                *pCache = obj;
                *pToken = obj->CollectionChanged += ref new ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventHandler(
                    this, &::XamlBindingInfo::XamlBindingTracking::CollectionChanged);
            }
        }

        void UpdateDependencyPropertyChangedListener(::Windows::UI::Xaml::DependencyObject^ obj, Windows::UI::Xaml::DependencyProperty^ property, ::Windows::UI::Xaml::DependencyObject^* pCache, INT64* pToken)
        {
            if (*pCache != nullptr && !(*pCache)->Equals(obj))
            {
                (*pCache)->UnregisterPropertyChangedCallback(property, *pToken);
                *pCache = nullptr;
            }

            if (*pCache == nullptr && obj != nullptr)
            {
                *pCache = obj;
                *pToken = obj->RegisterPropertyChangedCallback(property, ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback(
                    this, &::XamlBindingInfo::XamlBindingTracking::DependencyPropertyChanged));
            }
        }


    private:
        IXamlBindingTracking* _pBindingsTrackingWeakRef = nullptr;
    };

    ref class XamlBindingSetters sealed
    {
    internal:
        static void Set_Windows_UI_Xaml_FrameworkElement_Width(::Windows::UI::Xaml::FrameworkElement^ obj, int expectedPhase, int currentPhase, ::default::float64 value)
        {
            if (shouldUpdate(expectedPhase, currentPhase))
            {
                obj->Width = value;
            }
        }
        static void Set_Windows_UI_Xaml_FrameworkElement_MaxWidth(::Windows::UI::Xaml::FrameworkElement^ obj, int expectedPhase, int currentPhase, ::default::float64 value)
        {
            if (shouldUpdate(expectedPhase, currentPhase))
            {
                obj->MaxWidth = value;
            }
        }

        static bool shouldUpdate(int expectedPhase, int currentPhase)
        {
            return (currentPhase == -1 || currentPhase == expectedPhase);
        }
    };

    template<class T> 
    class XamlBindingsBase : public IXamlBindings
    {
    protected:
        T _dataRoot;
        ::XamlBindingInfo::XamlBindingTracking^ _bindingsTracking;

    protected:
        XamlBindingsBase()
            : _dataRoot(nullptr)
            , _bindingsTracking(nullptr)
        {
        }

        virtual ~XamlBindingsBase()
        {
            if (_bindingsTracking != nullptr)
            {
                _bindingsTracking->SetListener(nullptr);
                _bindingsTracking = nullptr;
            }
        }
    
    public:
        bool SetDataRoot(::Platform::Object^ data)
        {
            T newValue = safe_cast<T>(data);
            if (newValue != nullptr)
            {
                this->_dataRoot = newValue;
                return true;
            }
            return false;
        }

        void InitializeTracking(::XamlBindingInfo::IXamlBindingTracking* pBindingsTracking)
        {
            _bindingsTracking = ref new ::XamlBindingInfo::XamlBindingTracking();
            _bindingsTracking->SetListener(pBindingsTracking);
        }

        virtual void StopTracking() override
        {
            ReleaseAllListeners();
        }

        virtual void Update() override
        {
            Update_(_dataRoot, true, -1);
        }

        virtual void Connect(int connectionId, ::Platform::Object^ target) = 0;

        virtual void ResetTemplate() = 0;

        virtual int ProcessBindings(Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs^ args) = 0;

protected:
        virtual void Update_(T obj, bool isInitialUpdate, int phase) = 0;

        virtual void ReleaseAllListeners()
        {
            // Overridden in the binding class as needed.
        }
    };
}



